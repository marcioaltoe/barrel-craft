import * as fs from 'node:fs/promises'
import * as path from 'node:path'
import type { FileConfig } from '../types'
import { expandVariablePatterns } from './pattern-expander'

const CONFIG_FILES = [
  'barrel-craft.json',
  '.barrel-craft.json',
  'barrel.config.json',
  '.barrel.config.json',
]

export async function findConfigFile(startDir: string = process.cwd()): Promise<string | null> {
  let currentDir = path.resolve(startDir)
  const root = path.parse(currentDir).root

  while (currentDir !== root) {
    for (const configFile of CONFIG_FILES) {
      const configPath = path.join(currentDir, configFile)
      try {
        await fs.access(configPath)
        return configPath
      } catch {
        // File doesn't exist, continue
      }
    }
    currentDir = path.dirname(currentDir)
  }

  return null
}

export async function loadConfigFile(configPath: string): Promise<FileConfig> {
  try {
    const content = await fs.readFile(configPath, 'utf8')
    const rawConfig = JSON.parse(content) as Partial<FileConfig>

    // Process headerComment to replace escaped newlines with actual newlines
    const processedHeaderComment = rawConfig.headerComment
      ? rawConfig.headerComment.replace(/\\n/g, '\n')
      : '// Generated by barrel-craft\n\n'

    // Set defaults
    const config: FileConfig = {
      headerComment: processedHeaderComment,
      targets: rawConfig.targets || ['.'],
      forceGenerate: rawConfig.forceGenerate || [],
      exclude: rawConfig.exclude || ['**/*.test.*', '**/*.spec.*', '**/*.d.ts'],
      extensions: rawConfig.extensions || ['ts', 'tsx'],
      sortExports: rawConfig.sortExports !== false, // default true
      subdirectories: rawConfig.subdirectories ?? true, // default true
      verbose: rawConfig.verbose ?? false, // default false
      force: rawConfig.force ?? false, // default false
    }

    // Expand variable patterns in all path lists
    return {
      ...config,
      targets: expandVariablePatterns(config.targets),
      forceGenerate: expandVariablePatterns(config.forceGenerate),
      exclude: expandVariablePatterns(config.exclude),
    }
  } catch (error: unknown) {
    throw new Error(
      `Error loading config from ${configPath}: ${
        error instanceof Error ? error.message : 'unknown error'
      }`,
    )
  }
}
