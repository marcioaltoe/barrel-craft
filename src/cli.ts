#!/usr/bin/env node

import * as fs from 'node:fs/promises'
import * as path from 'node:path'
import { Command } from 'commander'
import { BarrelGenerator } from './core/barrel-generator'
import type { BarrelConfig, FileConfig } from './types'

const program = new Command()

program
  .name('barrel-craft')
  .description('Generate clean and consistent barrel files for TypeScript and React projects')
  .version('0.1.0', '-v, --version', 'output the version number')

program
  .argument('[directory]', 'directory to generate barrel files for', '.')
  .option('-e, --extensions <extensions...>', 'file extensions to include', ['ts', 'tsx'])
  .option('-x, --exclude <patterns...>', 'patterns to exclude', ['*.test.*', '*.spec.*'])
  .option('-s, --subdirectories', 'include subdirectories', false)
  .option('-c, --config <path>', 'path to config file')
  .option('--header <comment>', 'custom header comment for generated files')
  .option('--no-sort', 'do not sort exports alphabetically')
  .option('-V, --verbose', 'show detailed output', false)
  .action(async (directory: string, options) => {
    try {
      const config: BarrelConfig = {
        extensions: options.extensions,
        excludePatterns: options.exclude,
        includeSubdirectories: options.subdirectories,
        sortExports: options.sort,
        verbose: options.verbose,
        headerComment: options.header,
        configFile: options.config,
      }

      const generator = new BarrelGenerator(config)

      const results = await generator.generateBarrels(directory)

      if (generator.isVerbose()) {
        results.forEach((result) => {
          const mode = 'mode' in result ? ` [${result.mode}]` : ''
          console.log(`   ${result.filePath} (${result.exportsCount} exports)${mode}`)
        })
        if (results.length > 0) {
          console.log(`\n✅ Generated ${results.length} barrel file(s)`)
        }
      } else if (results.length > 0) {
        console.log(`✅ Generated ${results.length} barrel file(s)`)
      }
    } catch (error) {
      console.error('❌ Error:', error instanceof Error ? error.message : error)
      process.exit(1)
    }
  })

// Add init command
program
  .command('init')
  .description('Create a barrel-craft.json configuration file')
  .option('--force', 'overwrite existing config file without confirmation')
  .action(async (options) => {
    try {
      const configPath = path.join(process.cwd(), 'barrel-craft.json')

      // Check if config file already exists
      const fileExists = await checkFileExists(configPath)

      if (fileExists && !options.force) {
        const shouldOverwrite = await promptOverwrite(configPath)
        if (!shouldOverwrite) {
          console.log('❌ Cancelled - config file not created')
          process.exit(0)
        }
      }

      const defaultConfig: FileConfig = {
        headerComment:
          '// This file is auto-generated by barrel-craft. Edit only if you are sure.\n\n',
        targets: ['backend/src', 'frontend/src', 'src'],
        forceGenerate: [
          'backend/src/{domain|application}/ports',
          'frontend/src/{services|components}',
        ],
        exclude: [
          '**/__tests__/**',
          '**/@types/**',
          '**/*.d.ts',
          '**/*.spec.*',
          '**/*.test.*',
          '**/components/ui/**',
          '**/migrations/**',
          '**/routes/**',
          '**/seeds/**',
          'routeTree.gen.ts',
        ],
        extensions: ['ts', 'tsx'],
        sortExports: true,
        subdirectories: true,
        verbose: false,
        force: false,
      }

      await fs.writeFile(configPath, JSON.stringify(defaultConfig, null, 2))

      console.log(`✅ Created barrel-craft.json configuration file at ${configPath}`)
      console.log('\nExample usage:')
      console.log('  barrel-craft              # Auto-discover and use config')
      console.log('  barrel-craft -c config.json # Use specific config file')
    } catch (error) {
      console.error(
        '❌ Error creating config file:',
        error instanceof Error ? error.message : error,
      )
      process.exit(1)
    }
  })

async function checkFileExists(filePath: string): Promise<boolean> {
  try {
    await fs.access(filePath)
    return true
  } catch {
    return false
  }
}

async function promptOverwrite(configPath: string): Promise<boolean> {
  // Simple prompt for overwrite confirmation
  const readline = require('node:readline')
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  return new Promise((resolve) => {
    rl.question(
      `Config file ${configPath} already exists. Overwrite? (y/N): `,
      (answer: string) => {
        rl.close()
        resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes')
      },
    )
  })
}

// Add clean command
program
  .command('clean')
  .description('Clean old barrel files with matching header comments')
  .option('-c, --config <path>', 'path to config file')
  .option('--dry-run', 'show what would be cleaned without actually deleting')
  .option('--force', 'remove files even without header comment match')
  .action(async (options) => {
    try {
      const generator = new BarrelGenerator({
        extensions: ['ts', 'tsx'],
        excludePatterns: [],
        includeSubdirectories: true,
        sortExports: true,
        verbose: true,
        configFile: options.config,
      })

      await generator.cleanOldBarrelFiles(options.dryRun || false, options.force || false)
    } catch (error) {
      console.error('❌ Error:', error instanceof Error ? error.message : error)
      process.exit(1)
    }
  })

program.parse()
