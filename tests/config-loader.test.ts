import * as fs from 'node:fs/promises'
import * as path from 'node:path'
import { afterEach, beforeEach, describe, expect, it } from 'vitest'
import { findConfigFile, loadConfigFile } from '../src/utils/config-loader'

describe('config-loader', () => {
  const testDir = path.join(__dirname, 'temp-config')

  beforeEach(async () => {
    await fs.mkdir(testDir, { recursive: true })
  })

  afterEach(async () => {
    await fs.rm(testDir, { recursive: true, force: true })
  })

  describe('findConfigFile', () => {
    it('should find barrel-craft.json in current directory', async () => {
      const configPath = path.join(testDir, 'barrel-craft.json')
      await fs.writeFile(configPath, '{}')

      const result = await findConfigFile(testDir)
      expect(result).toBe(configPath)
    })

    it('should find config file in parent directory', async () => {
      const subDir = path.join(testDir, 'sub')
      await fs.mkdir(subDir)

      const configPath = path.join(testDir, 'barrel-craft.json')
      await fs.writeFile(configPath, '{}')

      const result = await findConfigFile(subDir)
      expect(result).toBe(configPath)
    })

    it('should return null when no config file found', async () => {
      const result = await findConfigFile(testDir)
      expect(result).toBeNull()
    })

    it('should prefer barrel-craft.json over other config files', async () => {
      const configPath1 = path.join(testDir, 'barrel-craft.json')
      const configPath2 = path.join(testDir, '.barrel-craft.json')

      await fs.writeFile(configPath1, '{}')
      await fs.writeFile(configPath2, '{}')

      const result = await findConfigFile(testDir)
      expect(result).toBe(configPath1)
    })
  })

  describe('loadConfigFile', () => {
    it('should load config with defaults', async () => {
      const configPath = path.join(testDir, 'barrel-craft.json')
      await fs.writeFile(configPath, '{}')

      const config = await loadConfigFile(configPath)

      expect(config).toEqual({
        headerComment: '// Generated by barrel-craft\n\n',
        targets: ['.'],
        forceGenerate: [],
        exclude: ['**/*.test.*', '**/*.spec.*', '**/*.d.ts'],
        extensions: ['ts', 'tsx'],
        sortExports: true,
      })
    })

    it('should load custom config values', async () => {
      const configPath = path.join(testDir, 'barrel-craft.json')
      const configData = {
        headerComment: '// Custom header\n\n',
        targets: ['src', 'lib'],
        forceGenerate: ['src/components'],
        exclude: ['**/*.test.*'],
        extensions: ['ts'],
        sortExports: false,
      }

      await fs.writeFile(configPath, JSON.stringify(configData))

      const config = await loadConfigFile(configPath)
      expect(config).toEqual(configData)
    })

    it('should expand variable patterns', async () => {
      const configPath = path.join(testDir, 'barrel-craft.json')
      const configData = {
        targets: ['src/{components|utils}'],
        forceGenerate: ['src/{auth|dashboard}/pages'],
      }

      await fs.writeFile(configPath, JSON.stringify(configData))

      const config = await loadConfigFile(configPath)

      expect(config.targets).toEqual(['src/components', 'src/utils'])
      expect(config.forceGenerate).toEqual(['src/auth/pages', 'src/dashboard/pages'])
    })

    it('should throw error for invalid JSON', async () => {
      const configPath = path.join(testDir, 'barrel-craft.json')
      await fs.writeFile(configPath, 'invalid json')

      await expect(loadConfigFile(configPath)).rejects.toThrow()
    })
  })
})
